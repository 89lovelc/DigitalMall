<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"	>
	<!-- <aop:aspectj-autoproxy /> -->
	
	<context:component-scan base-package="edu.ccu.comp.se.digitalmall.service,edu.ccu.comp.se.digitalmall.dao">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:property-placeholder location="classpath:resources.properties"/>
   <!-- 数据源 -->
    <!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_user}"/>
        <property name="password" value="${jdbc_password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <property name="filters" value="${druid.filters}" />
    </bean>	 
<!-- 	<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dataSource"/>
    </bean> -->
	<bean id="sessionFactory"
	class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" /><!-- 1、指定数据源 -->
		<!-- <property name="dataSource" ref="dataSourceProxy" /> -->
		<property name="hibernateProperties"><!-- 2、指定Hibernate属性 -->
		   	<props>
		       <prop key="hibernate.dialect">${hibernate.dialect}</prop>
		       <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
		       <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
		       <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
		       <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
		       <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
		       <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
		   </props>
		</property>
		
		<property name="packagesToScan" value="edu.ccu.comp.se.digitalmall.model" /><!-- 3、指定注解类 -->

	</bean>
	<!--Hibernate Template -->
	<bean id="hibernateTemplate" 
	class="org.springframework.orm.hibernate3.HibernateTemplate" >
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 事务管理器配置 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="doReweight" propagation="REQUIRES_NEW"/>
            <tx:method name="doClear*" propagation="REQUIRES_NEW"/>
            <tx:method name="doSend*" propagation="REQUIRES_NEW"/>
            <tx:method name="doBatchSave*" propagation="REQUIRES_NEW"/>

            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="count*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true" proxy-target-class="true">
        
        <aop:pointcut id="txPointcut" expression="execution(* edu.ccu.comp.se.digitalmall.service.*.*(..))"/>
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
	<!-- spring mail send configuration -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.163.com" />
		<property name="username" value="jerome610" />
		<property name="password" value="1233211234567" />
		<property name="defaultEncoding" value="UTF-8"></property> 
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop> 
				<prop key="mail.smtp.timeout">25000</prop>
			</props>
		</property>
	</bean>
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<props>  
	            <prop key="resource.loader">file</prop>  
	            <!-- <prop key="file.resource.loader.path">.</prop>  --> 
	            <prop key="file.resource.loader.class">
	            	org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
	            </prop>  
	            <prop key="input.encoding">UTF-8</prop>  
	            <prop key="output.encoding">UTF-8</prop>  
	        </props>  
		</property>
	</bean>

</beans>