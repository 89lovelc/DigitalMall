{"version":3,"file":"esl.org.js","sources":["esl.org.js"],"sourcesContent":["/**\r\n * ESL (Enterprise Standard Loader)\r\n * Copyright 2013 Baidu Inc. All rights reserved.\r\n *\r\n * @file Browser端标准加载器，符合AMD规范\r\n * @author errorrik(errorrik@gmail.com)\r\n *         Firede(firede@firede.us)\r\n */\r\n\r\n/* jshint ignore:start */\r\nvar define;\r\nvar require;\r\nvar esl;\r\n/* jshint ignore:end */\r\n\r\n(function (global) {\r\n    // \"mod\"开头的变量或函数为内部模块管理函数\r\n    // 为提高压缩率，不使用function或object包装\r\n\r\n    /**\r\n     * 模块容器\r\n     *\r\n     * @inner\r\n     * @type {Object}\r\n     */\r\n    var modModules = {};\r\n\r\n    /**\r\n     * 自动定义的模块表\r\n     *\r\n     * 模块define factory是用到时才执行，但是以下几种情况需要自动马上执行：\r\n     * 1. require( [moduleId], callback )\r\n     * 2. plugin module: require( 'plugin!resource' )\r\n     *\r\n     * @inner\r\n     * @type {Object}\r\n     */\r\n    var autoDefineModules = {};\r\n\r\n\r\n    // 模块状态枚举量\r\n    var MODULE_PRE_DEFINED = 1;\r\n    var MODULE_ANALYZED = 2;\r\n    var MODULE_PREPARED = 3;\r\n    var MODULE_DEFINED = 4;\r\n\r\n    /**\r\n     * 全局require函数\r\n     *\r\n     * @inner\r\n     * @type {Function}\r\n     */\r\n    var actualGlobalRequire = createLocalRequire();\r\n\r\n    // #begin-ignore\r\n    /**\r\n     * 超时提醒定时器\r\n     *\r\n     * @inner\r\n     * @type {number}\r\n     */\r\n    var waitTimeout;\r\n    // #end-ignore\r\n\r\n    /**\r\n     * 加载模块\r\n     *\r\n     * @param {string|Array} requireId 模块id或模块id数组，\r\n     * @param {Function=} callback 加载完成的回调函数\r\n     * @return {*}\r\n     */\r\n    function require(requireId, callback) {\r\n        // #begin-ignore\r\n        // #begin assertNotContainRelativeId\r\n        // 确定require的模块id不包含相对id。用于global require，提前预防难以跟踪的错误出现\r\n        var invalidIds = [];\r\n\r\n        /**\r\n         * 监测模块id是否relative id\r\n         *\r\n         * @inner\r\n         * @param {string} id 模块id\r\n         */\r\n        function monitor(id) {\r\n            if (id.indexOf('.') === 0) {\r\n                invalidIds.push(id);\r\n            }\r\n        }\r\n\r\n        if (typeof requireId === 'string') {\r\n            monitor(requireId);\r\n        }\r\n        else {\r\n            each(\r\n                requireId,\r\n                function (id) {\r\n                    monitor(id);\r\n                }\r\n            );\r\n        }\r\n\r\n        // 包含相对id时，直接抛出错误\r\n        if (invalidIds.length > 0) {\r\n            throw new Error(\r\n                '[REQUIRE_FATAL]Relative ID is not allowed in global require: '\r\n                + invalidIds.join(', ')\r\n            );\r\n        }\r\n        // #end assertNotContainRelativeId\r\n\r\n        // 超时提醒\r\n        var timeout = requireConf.waitSeconds;\r\n        if (timeout && (requireId instanceof Array)) {\r\n            if (waitTimeout) {\r\n                clearTimeout(waitTimeout);\r\n            }\r\n            waitTimeout = setTimeout(waitTimeoutNotice, timeout * 1000);\r\n        }\r\n        // #end-ignore\r\n\r\n        return actualGlobalRequire(requireId, callback);\r\n    }\r\n\r\n    /**\r\n     * 版本号\r\n     *\r\n     * @type {string}\r\n     */\r\n    require.version = '1.8.6';\r\n\r\n    /**\r\n     * loader名称\r\n     *\r\n     * @type {string}\r\n     */\r\n    require.loader = 'esl';\r\n\r\n    /**\r\n     * 将模块标识转换成相对的url\r\n     *\r\n     * @param {string} id 模块标识\r\n     * @return {string}\r\n     */\r\n    require.toUrl = actualGlobalRequire.toUrl;\r\n\r\n    // #begin-ignore\r\n    /**\r\n     * 超时提醒函数\r\n     *\r\n     * @inner\r\n     */\r\n    function waitTimeoutNotice() {\r\n        var hangModules = [];\r\n        var missModules = [];\r\n        var hangModulesMap = {};\r\n        var missModulesMap = {};\r\n        var visited = {};\r\n\r\n        /**\r\n         * 检查模块的加载错误\r\n         *\r\n         * @inner\r\n         * @param {string} id 模块id\r\n         */\r\n        function checkError(id, hard) {\r\n            if (visited[id] || modIs(id, MODULE_DEFINED)) {\r\n                return;\r\n            }\r\n\r\n            visited[id] = 1;\r\n\r\n            if (!modIs(id, MODULE_PREPARED)) {\r\n                // HACK: 为gzip后体积优化，不做抽取\r\n                if (!hangModulesMap[id]) {\r\n                    hangModulesMap[id] = 1;\r\n                    hangModules.push(id);\r\n                }\r\n            }\r\n\r\n            var mod = modModules[id];\r\n            if (!mod) {\r\n                if (!missModulesMap[id]) {\r\n                    missModulesMap[id] = 1;\r\n                    missModules.push(id);\r\n                }\r\n            }\r\n            else if (hard) {\r\n                if (!hangModulesMap[id]) {\r\n                    hangModulesMap[id] = 1;\r\n                    hangModules.push(id);\r\n                }\r\n\r\n                each(\r\n                    mod.depMs,\r\n                    function (dep) {\r\n                        checkError(dep.absId, dep.hard);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        for (var id in autoDefineModules) {\r\n            checkError(id, 1);\r\n        }\r\n\r\n        if (hangModules.length || missModules.length) {\r\n            throw new Error(\r\n                '[MODULE_TIMEOUT]Hang( '\r\n                + (hangModules.join(', ') || 'none')\r\n                + ' ) Miss( '\r\n                + (missModules.join(', ') || 'none')\r\n                + ' )'\r\n            );\r\n        }\r\n    }\r\n    // #end-ignore\r\n\r\n    /**\r\n     * 尝试完成模块定义的定时器\r\n     *\r\n     * @inner\r\n     * @type {number}\r\n     */\r\n    var tryDefineTimeout;\r\n\r\n    /**\r\n     * 定义模块\r\n     *\r\n     * @param {string=} id 模块标识\r\n     * @param {Array=} dependencies 依赖模块列表\r\n     * @param {Function=} factory 创建模块的工厂方法\r\n     */\r\n    function define(id, dependencies, factory) {\r\n        // define(factory)\r\n        // define(dependencies, factory)\r\n        // define(id, factory)\r\n        // define(id, dependencies, factory)\r\n        if (factory == null) {\r\n            if (dependencies == null) {\r\n                factory = id;\r\n                id = null;\r\n            }\r\n            else {\r\n                factory = dependencies;\r\n                dependencies = null;\r\n                if (id instanceof Array) {\r\n                    dependencies = id;\r\n                    id = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (factory == null) {\r\n            return;\r\n        }\r\n\r\n        // 出现window不是疏忽\r\n        // esl设计是做为browser端的loader\r\n        // 闭包的global更多意义在于：\r\n        //     define和require方法可以被挂到用户自定义对象中\r\n        var opera = window.opera;\r\n\r\n        // IE下通过current script的data-require-id获取当前id\r\n        if (\r\n            !id\r\n            && document.attachEvent\r\n            && (!(opera && opera.toString() === '[object Opera]'))\r\n        ) {\r\n            var currentScript = getCurrentScript();\r\n            id = currentScript && currentScript.getAttribute('data-require-id');\r\n        }\r\n\r\n        if (id) {\r\n            modPreDefine(id, dependencies, factory);\r\n\r\n            // 在不远的未来尝试完成define\r\n            // define可能是在页面中某个地方调用，不一定是在独立的文件被require装载\r\n            if (tryDefineTimeout) {\r\n                clearTimeout(tryDefineTimeout);\r\n            }\r\n        }\r\n        else {\r\n            // 纪录到共享变量中，在load或readystatechange中处理\r\n            // 标准浏览器下，使用匿名define时，将进入这个分支\r\n            wait4PreDefine[0] = {\r\n                deps    : dependencies,\r\n                factory : factory\r\n            };\r\n        }\r\n    }\r\n\r\n    define.amd = {};\r\n\r\n    /**\r\n     * 模块配置获取函数\r\n     *\r\n     * @inner\r\n     * @return {Object} 模块配置对象\r\n     */\r\n    function moduleConfigGetter() {\r\n        var conf = requireConf.config[this.id];\r\n        if (conf && typeof conf === 'object') {\r\n            return conf;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * 预定义模块\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块标识\r\n     * @param {Array.<string>} dependencies 显式声明的依赖模块列表\r\n     * @param {*} factory 模块定义函数或模块对象\r\n     */\r\n    function modPreDefine(id, dependencies, factory) {\r\n        // 将模块存入容器\r\n        //\r\n        // 模块内部信息包括\r\n        // -----------------------------------\r\n        // id: module id\r\n        // depsDec: 模块定义时声明的依赖\r\n        // deps: 模块依赖，默认为['require', 'exports', 'module']\r\n        // factory: 初始化函数或对象\r\n        // factoryDeps: 初始化函数的参数依赖\r\n        // exports: 模块的实际暴露对象（AMD定义）\r\n        // config: 用于获取模块配置信息的函数（AMD定义）\r\n        // state: 模块当前状态\r\n        // require: local require函数\r\n        // depMs: 实际依赖的模块集合，数组形式\r\n        // depMkv: 实际依赖的模块集合，表形式，便于查找\r\n        // depRs: 实际依赖的资源集合\r\n        // depPMs: 用于加载资源的模块集合，key是模块名，value是1，仅用于快捷查找\r\n        // ------------------------------------\r\n        if (!modModules[id]) {\r\n            modModules[id] = {\r\n                id          : id,\r\n                depsDec     : dependencies,\r\n                deps        : dependencies || ['require', 'exports', 'module'],\r\n                factoryDeps : [],\r\n                factory     : factory,\r\n                exports     : {},\r\n                config      : moduleConfigGetter,\r\n                state       : MODULE_PRE_DEFINED,\r\n                require     : createLocalRequire(id),\r\n                depMs       : [],\r\n                depMkv      : {},\r\n                depRs       : [],\r\n                depPMs      : []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 预分析模块\r\n     *\r\n     * 首先，完成对factory中声明依赖的分析提取\r\n     * 然后，尝试加载\"资源加载所需模块\"\r\n     *\r\n     * 需要先加载模块的原因是：如果模块不存在，无法进行resourceId normalize化\r\n     * modAnalyse完成后续的依赖分析处理，并进行依赖模块的加载\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块id\r\n     */\r\n    function modAnalyse(id) {\r\n        var mod = modModules[id];\r\n        if (!mod || modIs(id, MODULE_ANALYZED)) {\r\n            return;\r\n        }\r\n\r\n        var deps = mod.deps;\r\n        var factory = mod.factory;\r\n        var hardDependsCount = 0;\r\n\r\n        // 分析function body中的require\r\n        // 如果包含显式依赖声明，根据AMD规定和性能考虑，可以不分析factoryBody\r\n        if (typeof factory === 'function') {\r\n            hardDependsCount = Math.min(factory.length, deps.length);\r\n\r\n            // If the dependencies argument is present, the module loader\r\n            // SHOULD NOT scan for dependencies within the factory function.\r\n            !mod.depsDec && factory.toString()\r\n                .replace(/(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg, '')\r\n                .replace(/require\\(\\s*(['\"'])([^'\"]+)\\1\\s*\\)/g,\r\n                    function ($0, $1, depId) {\r\n                        deps.push(depId);\r\n                    }\r\n                );\r\n        }\r\n\r\n        var requireModules = [];\r\n        each(deps, function (depId, index) {\r\n            var idInfo = parseId(depId);\r\n            var absId = normalize(idInfo.mod, id);\r\n            var moduleInfo;\r\n            var resInfo;\r\n\r\n            if (absId && !BUILDIN_MODULE[absId]) {\r\n                // 如果依赖是一个资源，将其信息添加到module.depRs\r\n                //\r\n                // module.depRs中的项有可能是重复的。\r\n                // 在这个阶段，加载resource的module可能还未defined，\r\n                // 导致此时resource id无法被normalize。\r\n                //\r\n                // 比如对a/b/c而言，下面几个resource可能指的是同一个资源：\r\n                // - js!../name.js\r\n                // - js!a/name.js\r\n                // - ../../js!../name.js\r\n                //\r\n                // 所以加载资源的module ready时，需要遍历module.depRs进行处理\r\n                if (idInfo.res) {\r\n                    resInfo = {\r\n                        id: depId,\r\n                        mod: absId,\r\n                        res: idInfo.res\r\n                    };\r\n                    autoDefineModules[absId] = 1;\r\n                    mod.depPMs.push(absId);\r\n                    mod.depRs.push(resInfo);\r\n                }\r\n\r\n                // 对依赖模块的id normalize能保证正确性，在此处进行去重\r\n                moduleInfo = mod.depMkv[absId];\r\n                if (!moduleInfo) {\r\n                    moduleInfo = {\r\n                        id      : idInfo.mod,\r\n                        absId   : absId,\r\n                        hard    : index < hardDependsCount\r\n                    };\r\n                    mod.depMs.push(moduleInfo);\r\n                    mod.depMkv[absId] = moduleInfo;\r\n                    requireModules.push(absId);\r\n                }\r\n            }\r\n            else {\r\n                moduleInfo = {absId: absId};\r\n            }\r\n\r\n            // 如果当前正在分析的依赖项是define中声明的，\r\n            // 则记录到module.factoryDeps中\r\n            // 在factory invoke前将用于生成invoke arguments\r\n            if (index < hardDependsCount) {\r\n                mod.factoryDeps.push(resInfo || moduleInfo);\r\n            }\r\n        });\r\n\r\n        mod.state = MODULE_ANALYZED;\r\n        modInitFactoryInvoker(id);\r\n        nativeRequire(requireModules);\r\n    }\r\n\r\n    /**\r\n     * 对一些需要自动定义的模块进行自动定义\r\n     *\r\n     * @inner\r\n     */\r\n    function modAutoInvoke() {\r\n        for (var id in autoDefineModules) {\r\n            modUpdatePreparedState(id);\r\n            modTryInvokeFactory(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新模块的准备状态\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块id\r\n     */\r\n    function modUpdatePreparedState(id) {\r\n        var visited = {};\r\n        update(id);\r\n\r\n        function update(id) {\r\n            if (!modIs(id, MODULE_ANALYZED)) {\r\n                return false;\r\n            }\r\n            if (modIs(id, MODULE_PREPARED) || visited[id]) {\r\n                return true;\r\n            }\r\n\r\n            visited[id] = 1;\r\n            var mod = modModules[id];\r\n            var prepared = true;\r\n\r\n            each(\r\n                mod.depMs,\r\n                function (dep) {\r\n                    return (prepared = update(dep.absId));\r\n                }\r\n            );\r\n\r\n            // 判断resource是否加载完成。如果resource未加载完成，则认为未准备好\r\n            /* jshint ignore:start */\r\n            prepared && each(\r\n                mod.depRs,\r\n                function (dep) {\r\n                    prepared = !!(dep.absId && modIs(dep.absId, MODULE_DEFINED));\r\n                    return prepared;\r\n                }\r\n            );\r\n            /* jshint ignore:end */\r\n\r\n            if (prepared) {\r\n                mod.state = MODULE_PREPARED;\r\n            }\r\n\r\n            return prepared;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化模块定义时所需的factory执行器\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块id\r\n     */\r\n    function modInitFactoryInvoker(id) {\r\n        var mod = modModules[id];\r\n        var invoking;\r\n\r\n        mod.invokeFactory = invokeFactory;\r\n        each(\r\n            mod.depPMs,\r\n            function (pluginModuleId) {\r\n\r\n                modAddDefinedListener(\r\n                    pluginModuleId,\r\n                    function () {\r\n                        each(mod.depRs, function (res) {\r\n                            if (!res.absId && res.mod === pluginModuleId) {\r\n                                res.absId = normalize(res.id, id);\r\n                                nativeRequire([res.absId], modAutoInvoke);\r\n                            }\r\n                        });\r\n                    }\r\n                );\r\n\r\n            }\r\n        );\r\n\r\n        /**\r\n         * 初始化模块\r\n         *\r\n         * @inner\r\n         */\r\n        function invokeFactory() {\r\n            if (invoking || mod.state !== MODULE_PREPARED) {\r\n                return;\r\n            }\r\n\r\n            invoking = 1;\r\n\r\n            // 拼接factory invoke所需的arguments\r\n            var factoryReady = 1;\r\n            var factoryDeps = [];\r\n            each(\r\n                mod.factoryDeps,\r\n                function (dep) {\r\n                    var depId = dep.absId;\r\n\r\n                    if (!BUILDIN_MODULE[depId]) {\r\n                        modTryInvokeFactory(depId);\r\n                        if (!modIs(depId, MODULE_DEFINED)) {\r\n                            factoryReady = 0;\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    factoryDeps.push(depId);\r\n                }\r\n            );\r\n\r\n            if (factoryReady) {\r\n                try {\r\n                    var args = modGetModulesExports(\r\n                        factoryDeps,\r\n                        {\r\n                            require : mod.require,\r\n                            exports : mod.exports,\r\n                            module  : mod\r\n                        }\r\n                    );\r\n\r\n                    // 调用factory函数初始化module\r\n                    var factory = mod.factory;\r\n                    var exports = typeof factory === 'function'\r\n                        ? factory.apply(global, args)\r\n                        : factory;\r\n\r\n                    if (exports != null) {\r\n                        mod.exports = exports;\r\n                    }\r\n\r\n                    mod.invokeFactory = null;\r\n                    delete autoDefineModules[id];\r\n                }\r\n                catch (ex) {\r\n                    invoking = 0;\r\n                    if (/^\\[MODULE_MISS\\]\"([^\"]+)/.test(ex.message)) {\r\n                        // 出错，则说明在factory的运行中，该require的模块是需要的\r\n                        // 所以把它加入强依赖中\r\n                        var hardCirclurDep = mod.depMkv[RegExp.$1];\r\n                        hardCirclurDep && (hardCirclurDep.hard = 1);\r\n                        return;\r\n                    }\r\n\r\n                    throw ex;\r\n                }\r\n\r\n                // 完成define\r\n                // 不放在try里，避免后续的运行错误被这里吞掉\r\n                modDefined(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判断模块是否完成相应的状态\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块标识\r\n     * @param {number} state 状态码，使用时传入相应的枚举变量，比如`MODULE_DEFINED`\r\n     * @return {boolean}\r\n     */\r\n    function modIs(id, state) {\r\n        return modModules[id] && modModules[id].state >= state;\r\n    }\r\n\r\n    /**\r\n     * 尝试执行模块factory函数，进行模块初始化\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块id\r\n     */\r\n    function modTryInvokeFactory(id) {\r\n        var mod = modModules[id];\r\n\r\n        if (mod && mod.invokeFactory) {\r\n            mod.invokeFactory();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据模块id数组，获取其的exports数组\r\n     * 用于模块初始化的factory参数或require的callback参数生成\r\n     *\r\n     * @inner\r\n     * @param {Array} modules 模块id数组\r\n     * @param {Object} buildinModules 内建模块对象\r\n     * @return {Array}\r\n     */\r\n    function modGetModulesExports(modules, buildinModules) {\r\n        var args = [];\r\n        each(\r\n            modules,\r\n            function (id, index) {\r\n                args[index] = buildinModules[id] || modGetModuleExports(id);\r\n            }\r\n        );\r\n\r\n        return args;\r\n    }\r\n\r\n    /**\r\n     * 模块定义完成事件监听器容器\r\n     *\r\n     * @inner\r\n     * @type {Object}\r\n     */\r\n    var modDefinedListeners = {};\r\n\r\n    /**\r\n     * 添加模块定义完成时间的监听器\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块标识\r\n     * @param {Function} listener 监听函数\r\n     */\r\n    function modAddDefinedListener(id, listener) {\r\n        if (modIs(id, MODULE_DEFINED)) {\r\n            listener();\r\n            return;\r\n        }\r\n\r\n        var listeners = modDefinedListeners[id];\r\n        if (!listeners) {\r\n            listeners = modDefinedListeners[id] = [];\r\n        }\r\n\r\n        listeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * 模块状态切换为定义完成\r\n     * 因为需要触发事件，MODULE_DEFINED状态切换通过该函数\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块标识\r\n     * @param {number} state 目标状态\r\n     */\r\n    function modDefined(id) {\r\n        var listeners = modDefinedListeners[id] || [];\r\n        var mod = modModules[id];\r\n        mod.state = MODULE_DEFINED;\r\n\r\n        var len = listeners.length;\r\n        while (len--) {\r\n            // 这里不做function类型的检测\r\n            // 因为listener都是通过modOn传入的，modOn为内部调用\r\n            listeners[len]();\r\n        }\r\n\r\n        // 清理listeners\r\n        listeners.length = 0;\r\n        delete modDefinedListeners[id];\r\n    }\r\n\r\n    /**\r\n     * 获取模块的exports\r\n     *\r\n     * @inner\r\n     * @param {string} id 模块标识\r\n     * @return {*}\r\n     */\r\n    function modGetModuleExports(id) {\r\n        if (modIs(id, MODULE_DEFINED)) {\r\n            return modModules[id].exports;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 内建module名称集合\r\n     *\r\n     * @inner\r\n     * @type {Object}\r\n     */\r\n    var BUILDIN_MODULE = {\r\n        require : require,\r\n        exports : 1,\r\n        module  : 1\r\n    };\r\n\r\n    /**\r\n     * 未预定义的模块集合\r\n     * 主要存储匿名方式define的模块\r\n     *\r\n     * @inner\r\n     * @type {Array}\r\n     */\r\n    var wait4PreDefine = [];\r\n\r\n    /**\r\n     * 完成模块预定义，此时处理的模块是匿名define的模块\r\n     *\r\n     * @inner\r\n     */\r\n    function completePreDefine(currentId) {\r\n        // HACK: 这里在IE下有个性能陷阱，不能使用任何变量。\r\n        //       否则貌似会形成变量引用和修改的读写锁，导致wait4PreDefine释放困难\r\n        each(wait4PreDefine, function (mod) {\r\n            modPreDefine(\r\n                currentId,\r\n                mod.deps,\r\n                mod.factory\r\n            );\r\n        });\r\n\r\n        wait4PreDefine.length = 0;\r\n        modAnalyse(currentId);\r\n    }\r\n\r\n    /**\r\n     * 获取模块\r\n     *\r\n     * @param {string|Array} ids 模块名称或模块名称列表\r\n     * @param {Function=} callback 获取模块完成时的回调函数\r\n     * @return {Object}\r\n     */\r\n    function nativeRequire(ids, callback, baseId, noRequests) {\r\n        // 根据 https://github.com/amdjs/amdjs-api/wiki/require\r\n        // It MUST throw an error if the module has not\r\n        // already been loaded and evaluated.\r\n        if (typeof ids === 'string') {\r\n            modTryInvokeFactory(ids);\r\n            if (!modIs(ids, MODULE_DEFINED)) {\r\n                throw new Error('[MODULE_MISS]\"' + ids + '\" is not exists!');\r\n            }\r\n\r\n            return modGetModuleExports(ids);\r\n        }\r\n\r\n        noRequests = noRequests || {};\r\n        var isCallbackCalled = 0;\r\n        if (ids instanceof Array) {\r\n            tryFinishRequire();\r\n\r\n            if (!isCallbackCalled) {\r\n                each(ids, function (id) {\r\n                    if (!(BUILDIN_MODULE[id] || modIs(id, MODULE_DEFINED))) {\r\n                        modAddDefinedListener(id, tryFinishRequire);\r\n\r\n                        if (!noRequests[id]) {\r\n                            (id.indexOf('!') > 0\r\n                                ? loadResource\r\n                                : loadModule\r\n                            )(id, baseId);\r\n                        }\r\n\r\n                        modAnalyse(id);\r\n                    }\r\n                });\r\n\r\n                modAutoInvoke();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 尝试完成require，调用callback\r\n         * 在模块与其依赖模块都加载完时调用\r\n         *\r\n         * @inner\r\n         */\r\n        function tryFinishRequire() {\r\n            if (!isCallbackCalled) {\r\n                var isAllCompleted = 1;\r\n                each(ids, function (id) {\r\n                    if (!BUILDIN_MODULE[id]) {\r\n                        return (isAllCompleted = !!modIs(id, MODULE_DEFINED));\r\n                    }\r\n                });\r\n\r\n                // 检测并调用callback\r\n                if (isAllCompleted) {\r\n                    isCallbackCalled = 1;\r\n\r\n                    (typeof callback === 'function') && callback.apply(\r\n                        global,\r\n                        modGetModulesExports(ids, BUILDIN_MODULE)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 正在加载的模块列表\r\n     *\r\n     * @inner\r\n     * @type {Object}\r\n     */\r\n    var loadingModules = {};\r\n\r\n    /**\r\n     * 加载模块\r\n     *\r\n     * @inner\r\n     * @param {string} moduleId 模块标识\r\n     */\r\n    function loadModule(moduleId) {\r\n        if (loadingModules[moduleId] || modModules[moduleId]) {\r\n            return;\r\n        }\r\n\r\n        loadingModules[moduleId] = 1;\r\n\r\n        // 创建script标签\r\n        //\r\n        // 这里不挂接onerror的错误处理\r\n        // 因为高级浏览器在devtool的console面板会报错\r\n        // 再throw一个Error多此一举了\r\n        var script = document.createElement('script');\r\n        script.setAttribute('data-require-id', moduleId);\r\n        script.src = toUrl(moduleId + '.js') ;\r\n        script.async = true;\r\n        if (script.readyState) {\r\n            script.onreadystatechange = loadedListener;\r\n        }\r\n        else {\r\n            script.onload = loadedListener;\r\n        }\r\n        appendScript(script);\r\n\r\n        /**\r\n         * script标签加载完成的事件处理函数\r\n         *\r\n         * @inner\r\n         */\r\n        function loadedListener() {\r\n            var readyState = script.readyState;\r\n            if (\r\n                typeof readyState === 'undefined'\r\n                || /^(loaded|complete)$/.test(readyState)\r\n            ) {\r\n                script.onload = script.onreadystatechange = null;\r\n                script = null;\r\n\r\n                completePreDefine(moduleId);\r\n                for (var key in autoDefineModules) {\r\n                    modAnalyse(key);\r\n                }\r\n                modAutoInvoke();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载资源\r\n     *\r\n     * @inner\r\n     * @param {string} pluginAndResource 插件与资源标识\r\n     * @param {string} baseId 当前环境的模块标识\r\n     */\r\n    function loadResource(pluginAndResource, baseId) {\r\n        if (modModules[pluginAndResource]) {\r\n            return;\r\n        }\r\n\r\n        var idInfo = parseId(pluginAndResource);\r\n        var resource = {\r\n            id: pluginAndResource,\r\n            state: MODULE_ANALYZED\r\n        };\r\n        modModules[pluginAndResource] = resource;\r\n\r\n        /**\r\n         * plugin加载完成的回调函数\r\n         *\r\n         * @inner\r\n         * @param {*} value resource的值\r\n         */\r\n        function pluginOnload(value) {\r\n            resource.exports = value || true;\r\n            modDefined(pluginAndResource);\r\n        }\r\n\r\n        /* jshint ignore:start */\r\n        /**\r\n         * 该方法允许plugin使用加载的资源声明模块\r\n         *\r\n         * @param {string} id 模块id\r\n         * @param {string} text 模块声明字符串\r\n         */\r\n        pluginOnload.fromText = function (id, text) {\r\n            autoDefineModules[id] = 1;\r\n            new Function(text)();\r\n            completePreDefine(id);\r\n        };\r\n        /* jshint ignore:end */\r\n\r\n        /**\r\n         * 加载资源\r\n         *\r\n         * @inner\r\n         * @param {Object} plugin 用于加载资源的插件模块\r\n         */\r\n        function load(plugin) {\r\n            var pluginRequire = baseId\r\n                ? modModules[baseId].require\r\n                : actualGlobalRequire;\r\n\r\n            plugin.load(\r\n                idInfo.res,\r\n                pluginRequire,\r\n                pluginOnload,\r\n                moduleConfigGetter.call({id: pluginAndResource})\r\n            );\r\n        }\r\n\r\n        load(modGetModuleExports(idInfo.mod));\r\n    }\r\n\r\n    /**\r\n     * require配置\r\n     *\r\n     * @inner\r\n     * @type {Object}\r\n     */\r\n    var requireConf = {\r\n        baseUrl     : './',\r\n        paths       : {},\r\n        config      : {},\r\n        map         : {},\r\n        packages    : [],\r\n        // #begin-ignore\r\n        waitSeconds : 0,\r\n        // #end-ignore\r\n        noRequests  : {},\r\n        urlArgs     : {}\r\n    };\r\n\r\n    /**\r\n     * 配置require\r\n     *\r\n     * @param {Object} conf 配置对象\r\n     */\r\n    require.config = function (conf) {\r\n        function mergeArrayItem(item) {\r\n            oldValue.push(item);\r\n        }\r\n\r\n        if (conf) {\r\n            for (var key in requireConf) {\r\n                var newValue = conf[key];\r\n                var oldValue = requireConf[key];\r\n\r\n                if (newValue) {\r\n                    if (key === 'urlArgs' && typeof newValue === 'string') {\r\n                        requireConf.urlArgs['*'] = newValue;\r\n                    }\r\n                    else {\r\n                        // 简单的多处配置还是需要支持，所以配置实现为支持二级mix\r\n                        if (oldValue instanceof Array) {\r\n                            each(newValue, mergeArrayItem);\r\n                        }\r\n                        else if (typeof oldValue === 'object') {\r\n                            for (var key in newValue) {\r\n                                oldValue[key] = newValue[key];\r\n                            }\r\n                        }\r\n                        else {\r\n                            requireConf[key] = newValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            createConfIndex();\r\n        }\r\n\r\n        // 配置信息对象clone返回，避免返回结果对象被用户程序修改可能导致的问题\r\n        // return clone(requireConf);\r\n    };\r\n\r\n    /**\r\n     * 对象克隆，支持raw type, Array, raw Object\r\n     *\r\n     * @inner\r\n     * @param {*} source 要克隆的对象\r\n     * @return {*}\r\n     */\r\n    // function clone(source) {\r\n    //     var result = source;\r\n\r\n    //     if (source instanceof Array) {\r\n    //         result = [];\r\n    //         each(source, function (item, i) {\r\n    //             result[i] = clone(item);\r\n    //         });\r\n    //     }\r\n    //     else if (typeof source === 'object') {\r\n    //         result = {};\r\n    //         for (var key in source) {\r\n    //             if (source.hasOwnProperty(key)) {\r\n    //                 result[key] = clone(source[key]);\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     return result;\r\n    // }\r\n\r\n    // 初始化时需要创建配置索引\r\n    createConfIndex();\r\n\r\n    /**\r\n     * paths内部索引\r\n     *\r\n     * @inner\r\n     * @type {Array}\r\n     */\r\n    var pathsIndex;\r\n\r\n    /**\r\n     * packages内部索引\r\n     *\r\n     * @inner\r\n     * @type {Array}\r\n     */\r\n    var packagesIndex;\r\n\r\n    /**\r\n     * mapping内部索引\r\n     *\r\n     * @inner\r\n     * @type {Array}\r\n     */\r\n    var mappingIdIndex;\r\n\r\n    /**\r\n     * urlArgs内部索引\r\n     *\r\n     * @inner\r\n     * @type {Array}\r\n     */\r\n    var urlArgsIndex;\r\n\r\n    /**\r\n     * noRequests内部索引\r\n     *\r\n     * @inner\r\n     * @type {Array}\r\n     */\r\n    var noRequestsIndex;\r\n\r\n    /**\r\n     * 将key为module id prefix的Object，生成数组形式的索引，并按照长度和字面排序\r\n     *\r\n     * @inner\r\n     * @param {Object} value 源值\r\n     * @param {boolean} allowAsterisk 是否允许*号表示匹配所有\r\n     * @return {Array}\r\n     */\r\n    function createKVSortedIndex(value, allowAsterisk) {\r\n        var index = kv2List(value, 1, allowAsterisk);\r\n        index.sort(descSorterByKOrName);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * 创建配置信息内部索引\r\n     *\r\n     * @inner\r\n     */\r\n    function createConfIndex() {\r\n        requireConf.baseUrl = requireConf.baseUrl.replace(/\\/$/, '') + '/';\r\n\r\n        // create paths index\r\n        pathsIndex = createKVSortedIndex(requireConf.paths);\r\n\r\n        // create mappingId index\r\n        mappingIdIndex = createKVSortedIndex(requireConf.map, 1);\r\n        each(\r\n            mappingIdIndex,\r\n            function (item) {\r\n                item.v = createKVSortedIndex(item.v);\r\n            }\r\n        );\r\n\r\n        // create packages index\r\n        packagesIndex = [];\r\n        each(\r\n            requireConf.packages,\r\n            function (packageConf) {\r\n                var pkg = packageConf;\r\n                if (typeof packageConf === 'string') {\r\n                    pkg = {\r\n                        name: packageConf.split('/')[0],\r\n                        location: packageConf,\r\n                        main: 'main'\r\n                    };\r\n                }\r\n\r\n                pkg.location = pkg.location || pkg.name;\r\n                pkg.main = (pkg.main || 'main').replace(/\\.js$/i, '');\r\n                pkg.reg = createPrefixRegexp(pkg.name);\r\n                packagesIndex.push(pkg);\r\n            }\r\n        );\r\n        packagesIndex.sort(descSorterByKOrName);\r\n\r\n        // create urlArgs index\r\n        urlArgsIndex = createKVSortedIndex(requireConf.urlArgs, 1);\r\n\r\n        // create noRequests index\r\n        noRequestsIndex = createKVSortedIndex(requireConf.noRequests);\r\n        each(noRequestsIndex, function (item) {\r\n            var value = item.v;\r\n            var mapIndex = {};\r\n            item.v = mapIndex;\r\n\r\n            if (!(value instanceof Array)) {\r\n                value = [value];\r\n            }\r\n\r\n            each(value, function (meetId) {\r\n                mapIndex[meetId] = 1;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 对配置信息的索引进行检索\r\n     *\r\n     * @inner\r\n     * @param {string} value 要检索的值\r\n     * @param {Array} index 索引对象\r\n     * @param {Function} hitBehavior 索引命中的行为函数\r\n     */\r\n    function indexRetrieve(value, index, hitBehavior) {\r\n        each(index, function (item) {\r\n            if (item.reg.test(value)) {\r\n                hitBehavior(item.v, item.k, item);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 将`模块标识+'.extension'`形式的字符串转换成相对的url\r\n     *\r\n     * @inner\r\n     * @param {string} source 源字符串\r\n     * @return {string}\r\n     */\r\n    function toUrl(source) {\r\n        // 分离 模块标识 和 .extension\r\n        var extReg = /(\\.[a-z0-9]+)$/i;\r\n        var queryReg = /(\\?[^#]*)$/;\r\n        var extname = '';\r\n        var id = source;\r\n        var query = '';\r\n\r\n        if (queryReg.test(source)) {\r\n            query = RegExp.$1;\r\n            source = source.replace(queryReg, '');\r\n        }\r\n\r\n        if (extReg.test(source)) {\r\n            extname = RegExp.$1;\r\n            id = source.replace(extReg, '');\r\n        }\r\n\r\n        var url = id;\r\n\r\n        // paths处理和匹配\r\n        var isPathMap;\r\n        indexRetrieve(id, pathsIndex, function (value, key) {\r\n            url = url.replace(key, value);\r\n            isPathMap = 1;\r\n        });\r\n\r\n        // packages处理和匹配\r\n        if (!isPathMap) {\r\n            indexRetrieve(id, packagesIndex, function (value, key, item) {\r\n                url = url.replace(item.name, item.location);\r\n            });\r\n        }\r\n\r\n        // 相对路径时，附加baseUrl\r\n        if (!/^([a-z]{2,10}:\\/)?\\//i.test(url)) {\r\n            url = requireConf.baseUrl + url;\r\n        }\r\n\r\n        // 附加 .extension 和 query\r\n        url += extname + query;\r\n\r\n        // urlArgs处理和匹配\r\n        indexRetrieve(id, urlArgsIndex, function (value) {\r\n            url += (url.indexOf('?') > 0 ? '&' : '?') + value;\r\n        });\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * 创建local require函数\r\n     *\r\n     * @inner\r\n     * @param {number} baseId 当前module id\r\n     * @return {Function}\r\n     */\r\n    function createLocalRequire(baseId) {\r\n        var requiredCache = {};\r\n        function req(requireId, callback) {\r\n            if (typeof requireId === 'string') {\r\n                if (!requiredCache[requireId]) {\r\n                    requiredCache[requireId] =\r\n                        nativeRequire(normalize(requireId, baseId));\r\n                }\r\n\r\n                return requiredCache[requireId];\r\n            }\r\n            else if (requireId instanceof Array) {\r\n                // 分析是否有resource，取出pluginModule先\r\n                var pluginModules = [];\r\n                var pureModules = [];\r\n                var normalizedIds = [];\r\n\r\n                each(\r\n                    requireId,\r\n                    function (id, i) {\r\n                        var idInfo = parseId(id);\r\n                        var absId = normalize(idInfo.mod, baseId);\r\n                        pureModules.push(absId);\r\n                        autoDefineModules[absId] = 1;\r\n\r\n                        if (idInfo.res) {\r\n                            pluginModules.push(absId);\r\n                            normalizedIds[i] = null;\r\n                        }\r\n                        else {\r\n                            normalizedIds[i] = absId;\r\n                        }\r\n                    }\r\n                );\r\n\r\n                var noRequestModules = {};\r\n                each(\r\n                    pureModules,\r\n                    function (id) {\r\n                        var meet;\r\n                        indexRetrieve(\r\n                            id,\r\n                            noRequestsIndex,\r\n                            function (value) {\r\n                                meet = value;\r\n                            }\r\n                        );\r\n\r\n                        if (meet) {\r\n                            if (meet['*']) {\r\n                                noRequestModules[id] = 1;\r\n                            }\r\n                            else {\r\n                                each(pureModules, function (meetId) {\r\n                                    if (meet[meetId]) {\r\n                                        noRequestModules[id] = 1;\r\n                                        return false;\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                );\r\n\r\n                // 加载模块\r\n                nativeRequire(\r\n                    pureModules,\r\n                    function () {\r\n                        /* jshint ignore:start */\r\n                        each(normalizedIds, function (id, i) {\r\n                            if (id == null) {\r\n                                normalizedIds[i] = normalize(requireId[i], baseId);\r\n                            }\r\n                        });\r\n                        /* jshint ignore:end */\r\n\r\n                        nativeRequire(normalizedIds, callback, baseId);\r\n                    },\r\n                    baseId,\r\n                    noRequestModules\r\n                );\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 将[module ID] + '.extension'格式的字符串转换成url\r\n         *\r\n         * @inner\r\n         * @param {string} id 符合描述格式的源字符串\r\n         * @return {string}\r\n         */\r\n        req.toUrl = function (id) {\r\n            return toUrl(normalize(id, baseId));\r\n        };\r\n\r\n        return req;\r\n    }\r\n\r\n    /**\r\n     * id normalize化\r\n     *\r\n     * @inner\r\n     * @param {string} id 需要normalize的模块标识\r\n     * @param {string} baseId 当前环境的模块标识\r\n     * @return {string}\r\n     */\r\n    function normalize(id, baseId) {\r\n        if (!id) {\r\n            return '';\r\n        }\r\n\r\n        baseId = baseId || '';\r\n        var idInfo = parseId(id);\r\n        if (!idInfo) {\r\n            return id;\r\n        }\r\n\r\n        var resourceId = idInfo.res;\r\n        var moduleId = relative2absolute(idInfo.mod, baseId);\r\n\r\n        each(\r\n            packagesIndex,\r\n            function (packageConf) {\r\n                var name = packageConf.name;\r\n                if (name === moduleId) {\r\n                    moduleId = name + '/' + packageConf.main;\r\n                    return false;\r\n                }\r\n            }\r\n        );\r\n\r\n        // 根据config中的map配置进行module id mapping\r\n        indexRetrieve(\r\n            baseId,\r\n            mappingIdIndex,\r\n            function (value) {\r\n\r\n                indexRetrieve(\r\n                    moduleId,\r\n                    value,\r\n                    function (mdValue, mdKey) {\r\n                        moduleId = moduleId.replace(mdKey, mdValue);\r\n                    }\r\n                );\r\n\r\n            }\r\n        );\r\n\r\n        if (resourceId) {\r\n            var mod = modGetModuleExports(moduleId);\r\n            resourceId = mod.normalize\r\n                ? mod.normalize(\r\n                    resourceId,\r\n                    function (resId) {\r\n                        return normalize(resId, baseId);\r\n                    }\r\n                  )\r\n                : normalize(resourceId, baseId);\r\n\r\n            moduleId += '!' + resourceId;\r\n        }\r\n\r\n        return moduleId;\r\n    }\r\n\r\n    /**\r\n     * 相对id转换成绝对id\r\n     *\r\n     * @inner\r\n     * @param {string} id 要转换的id\r\n     * @param {string} baseId 当前所在环境id\r\n     * @return {string}\r\n     */\r\n    function relative2absolute(id, baseId) {\r\n        if (id.indexOf('.') === 0) {\r\n            var basePath = baseId.split('/');\r\n            var namePath = id.split('/');\r\n            var baseLen = basePath.length - 1;\r\n            var nameLen = namePath.length;\r\n            var cutBaseTerms = 0;\r\n            var cutNameTerms = 0;\r\n\r\n            pathLoop: for (var i = 0; i < nameLen; i++) {\r\n                var term = namePath[i];\r\n                switch (term) {\r\n                    case '..':\r\n                        if (cutBaseTerms < baseLen) {\r\n                            cutBaseTerms++;\r\n                            cutNameTerms++;\r\n                        }\r\n                        else {\r\n                            break pathLoop;\r\n                        }\r\n                        break;\r\n                    case '.':\r\n                        cutNameTerms++;\r\n                        break;\r\n                    default:\r\n                        break pathLoop;\r\n                }\r\n            }\r\n\r\n            basePath.length = baseLen - cutBaseTerms;\r\n            namePath = namePath.slice(cutNameTerms);\r\n\r\n            return basePath.concat(namePath).join('/');\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * 解析id，返回带有module和resource属性的Object\r\n     *\r\n     * @inner\r\n     * @param {string} id 标识\r\n     * @return {Object}\r\n     */\r\n    function parseId(id) {\r\n        var segs = id.split('!');\r\n\r\n        if (segs[0]) {\r\n            return {\r\n                mod: segs[0],\r\n                res: segs[1]\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 将对象数据转换成数组，数组每项是带有k和v的Object\r\n     *\r\n     * @inner\r\n     * @param {Object} source 对象数据\r\n     * @return {Array.<Object>}\r\n     */\r\n    function kv2List(source, keyMatchable, allowAsterisk) {\r\n        var list = [];\r\n        for (var key in source) {\r\n            if (source.hasOwnProperty(key)) {\r\n                var item = {\r\n                    k: key,\r\n                    v: source[key]\r\n                };\r\n                list.push(item);\r\n\r\n                if (keyMatchable) {\r\n                    item.reg = key === '*' && allowAsterisk\r\n                        ? /^/\r\n                        : createPrefixRegexp(key);\r\n                }\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    // 感谢requirejs，通过currentlyAddingScript兼容老旧ie\r\n    //\r\n    // For some cache cases in IE 6-8, the script executes before the end\r\n    // of the appendChild execution, so to tie an anonymous define\r\n    // call to the module name (which is stored on the node), hold on\r\n    // to a reference to this node, but clear after the DOM insertion.\r\n    var currentlyAddingScript;\r\n    var interactiveScript;\r\n\r\n    /**\r\n     * 获取当前script标签\r\n     * 用于ie下define未指定module id时获取id\r\n     *\r\n     * @inner\r\n     * @return {HTMLDocument}\r\n     */\r\n    function getCurrentScript() {\r\n        if (currentlyAddingScript) {\r\n            return currentlyAddingScript;\r\n        }\r\n        else if (\r\n            interactiveScript\r\n            && interactiveScript.readyState === 'interactive'\r\n        ) {\r\n            return interactiveScript;\r\n        }\r\n        else {\r\n            var scripts = document.getElementsByTagName('script');\r\n            var scriptLen = scripts.length;\r\n            while (scriptLen--) {\r\n                var script = scripts[scriptLen];\r\n                if (script.readyState === 'interactive') {\r\n                    interactiveScript = script;\r\n                    return script;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    var headElement = document.getElementsByTagName('head')[0];\r\n    var baseElement = document.getElementsByTagName('base')[0];\r\n    if (baseElement) {\r\n        headElement = baseElement.parentNode;\r\n    }\r\n\r\n    /**\r\n     * 向页面中插入script标签\r\n     *\r\n     * @inner\r\n     * @param {HTMLScriptElement} script script标签\r\n     */\r\n    function appendScript(script) {\r\n        currentlyAddingScript = script;\r\n\r\n        // If BASE tag is in play, using appendChild is a problem for IE6.\r\n        // See: http://dev.jquery.com/ticket/2709\r\n        baseElement\r\n            ? headElement.insertBefore(script, baseElement)\r\n            : headElement.appendChild(script);\r\n\r\n        currentlyAddingScript = null;\r\n    }\r\n\r\n    /**\r\n     * 创建id前缀匹配的正则对象\r\n     *\r\n     * @inner\r\n     * @param {string} prefix id前缀\r\n     * @return {RegExp}\r\n     */\r\n    function createPrefixRegexp(prefix) {\r\n        return new RegExp('^' + prefix + '(/|$)');\r\n    }\r\n\r\n    /**\r\n     * 循环遍历数组集合\r\n     *\r\n     * @inner\r\n     * @param {Array} source 数组源\r\n     * @param {function(Array,Number):boolean} iterator 遍历函数\r\n     */\r\n    function each(source, iterator) {\r\n        if (source instanceof Array) {\r\n            for (var i = 0, len = source.length; i < len; i++) {\r\n                if (iterator(source[i], i) === false) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据元素的k或name项进行数组字符数逆序的排序函数\r\n     *\r\n     * @inner\r\n     */\r\n    function descSorterByKOrName(a, b) {\r\n        var aValue = a.k || a.name;\r\n        var bValue = b.k || b.name;\r\n\r\n        if (bValue === '*') {\r\n            return -1;\r\n        }\r\n\r\n        if (aValue === '*') {\r\n            return 1;\r\n        }\r\n\r\n        return bValue.length - aValue.length;\r\n    }\r\n\r\n    // 暴露全局对象\r\n    //\r\n    // 如果define已经存在，说明已经有一个amd loader了，避免覆盖\r\n    // 这里有一个假设，只有amd loader会用define，但是，任何形式的loader可能会用require\r\n    //\r\n    // 使用 `global.` 的原因是，让被运行在第三方页面的代码，也能方便的用loader\r\n    // 第三方页面很可能存在一个loader，就算不存在，可能未来也会有。所以不能在全局用loader\r\n    // 这时，把esl的代码拿过去，只改全局IIFE最后的 `this`，就能获得namespace上的loader\r\n    //\r\n    //  // 声明自己的namespace\r\n    //  var selfnamespace = {};\r\n    //\r\n    //  // 这里是esl的代码\r\n    //  (function (global){\r\n    //      // esl的实现\r\n    //  })(selfnamespace); // 改这里的this\r\n    //\r\n    if (!global.define) {\r\n        global.define = define;\r\n\r\n        // 可能碰到其他形式的loader，所以，不要覆盖人家\r\n        if (!global.require) {\r\n            global.require = require;\r\n        }\r\n\r\n        // 如果存在其他版本的esl，在define那里就判断过了，不会进入这个分支\r\n        // 所以这里就不判断了，直接写\r\n        global.esl = require;\r\n    }\r\n})(this);"],"names":["define","require","esl","global","requireId","callback","monitor","id","indexOf","invalidIds","push","each","length","Error","join","timeout","requireConf","waitSeconds","Array","waitTimeout","clearTimeout","setTimeout","waitTimeoutNotice","actualGlobalRequire","checkError","hard","visited","modIs","MODULE_DEFINED","MODULE_PREPARED","hangModulesMap","hangModules","mod","modModules","depMs","dep","absId","missModulesMap","missModules","autoDefineModules","dependencies","factory","opera","window","document","attachEvent","toString","currentScript","getCurrentScript","getAttribute","modPreDefine","tryDefineTimeout","wait4PreDefine","deps","moduleConfigGetter","conf","config","this","depsDec","factoryDeps","exports","state","MODULE_PRE_DEFINED","createLocalRequire","depMkv","depRs","depPMs","modAnalyse","MODULE_ANALYZED","hardDependsCount","Math","min","replace","$0","$1","depId","requireModules","index","moduleInfo","resInfo","idInfo","parseId","normalize","BUILDIN_MODULE","res","modInitFactoryInvoker","nativeRequire","modAutoInvoke","modUpdatePreparedState","modTryInvokeFactory","update","prepared","invokeFactory","invoking","factoryReady","args","modGetModulesExports","module","apply","ex","test","message","hardCirclurDep","RegExp","modDefined","pluginModuleId","modAddDefinedListener","modules","buildinModules","modGetModuleExports","listener","listeners","modDefinedListeners","len","completePreDefine","currentId","ids","baseId","noRequests","tryFinishRequire","isCallbackCalled","isAllCompleted","loadResource","loadModule","moduleId","loadedListener","readyState","script","onload","onreadystatechange","key","loadingModules","createElement","setAttribute","src","toUrl","async","appendScript","pluginAndResource","pluginOnload","value","resource","load","plugin","pluginRequire","call","fromText","text","Function","createKVSortedIndex","allowAsterisk","kv2List","sort","descSorterByKOrName","createConfIndex","baseUrl","pathsIndex","paths","mappingIdIndex","map","item","v","packagesIndex","packages","packageConf","pkg","name","split","location","main","reg","createPrefixRegexp","urlArgsIndex","urlArgs","noRequestsIndex","mapIndex","meetId","indexRetrieve","hitBehavior","k","source","extReg","queryReg","extname","query","isPathMap","url","req","requiredCache","pluginModules","pureModules","normalizedIds","i","noRequestModules","meet","resourceId","relative2absolute","mdValue","mdKey","resId","basePath","namePath","baseLen","nameLen","cutBaseTerms","cutNameTerms","pathLoop","term","slice","concat","segs","keyMatchable","list","hasOwnProperty","currentlyAddingScript","interactiveScript","scripts","getElementsByTagName","scriptLen","baseElement","headElement","insertBefore","appendChild","prefix","iterator","a","b","aValue","bValue","version","loader","amd","mergeArrayItem","oldValue","newValue","parentNode"],"mappings":"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"}